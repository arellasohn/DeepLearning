# -*- coding: utf-8 -*-
"""Logistic_regression2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lwMCMC0Zi3DsirPwnpAVPXydUHjyuX-T
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""# 1. Data Load"""

dataset = pd.read_csv('/content/data_banknote_authentication.csv')
dataset.head(3)

banknote = dataset.values

"""- variance, skewness, curtosis, entropy 4개의 특징(X)을 통해 위폐 여부를 판단하는 classification model을 생성함

# 2. X와 y 분리
"""

X = banknote[:,:-1]
# X: 전체 행, index 0(variance)부터 index 3(entropy) column까지의 데이터
y = banknote[:,-1]
# y: 전체 행, 마지막 column (class)
print(X.shape, y.shape)

"""# 3. Training data와 test data 분리"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=42)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

"""# 4. Scaling (data scale 조정)"""



"""# 5. Logistic regression model 생성"""

from sklearn.linear_model import LogisticRegression

lr = LogisticRegression()
lr.fit(X_train,y_train)

"""# 6. Prediction"""

pred = lr.predict(X_test)
# X_test에 대한 예측값
# pred: class 예측값 0 또는 1

"""# 7. 성능 평가"""

from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix

# y_test, pred 비교
cm = confusion_matrix(y_test,pred)
# [[TN, FP]
#  [FN, TP]]
print(cm)
TN = cm[0,0]
FP = cm[0,1]
FN = cm[1,0]
TP = cm[1,1]

# accuracy = (TP+TN) / 전체데이터의 수
acc = (TP+TN)/(TP+TN+FP+FN) * 100
print('Accuracy  : ', round(acc,2),'%')

# error rate = (FP+FN) / 전체데이터의 수
err = (FP+FN) / (TP+TN+FP+FN) * 100
print('Error rate: ', round(err,2),'%')

# precision = TP / (TP+FP)
precision = TP / (TP+FP) * 100
print('Precision : ', round(precision,2),'%')

# recall = TP / (TP+FN)
recall = TP / (TP+FN) * 100
print('Recall    : ', round(recall,2),'%')

print(accuracy_score(y_test,pred))
print(precision_score(y_test,pred))
print(recall_score(y_test,pred))

from sklearn.metrics import classification_report
print(classification_report(y_test,pred))