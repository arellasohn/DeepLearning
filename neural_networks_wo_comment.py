# -*- coding: utf-8 -*-
"""neural_networks_wo_comment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10dbuXnjgc-ss0BoGtZhDPNXEH4ZN5Vd_

# 1. Library
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential

"""# 2. Load data
- X와 y분리
- training / test data 분리
"""

dataset = pd.read_csv('Iris_ohe.csv').values

dataset[-5:]

X = dataset[:,1:5]
y = dataset[:,5:]
print(X.shape, y.shape)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=15)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

"""# 3. Artificial Neural Netwokrs(ANN) structure
- Multi-layer perceptron (MLP)

1) input layer의 node는 몇 개인가? 4개 = X column의 수 = 특징의 수(sepalWidth,sepalLength,petalWidth,petalLength)<br>
2) output layer의 node는 몇 개인가? 3개 = y column의 수 = class의 수(setosa,versicolor,virginica)<br>
3) 몇 개의 hidden layer로 구성할 것인가? 1개(임의로 지정)<br>
4) 각 hidden layer node의 수는 몇 개인가? 5개(임의로 지정)<br>
5) 어떠한 activation function을 사용할 것인가?
"""

sample_shape = X_train[0].shape  # (4,)
num_class = y_train.shape[1]     # 3

iris_model = Sequential([
    Dense(5,activation='relu',input_shape=sample_shape),
    Dense(num_class,activation='softmax')
])

iris_model.summary()

"""# 4. ANN 학습"""

iris_model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['acc'])

ep = 500
batch = 32
val_ratio = 0.2

learning_result = iris_model.fit(X_train, y_train,
                                 epochs = ep,
                                 batch_size = batch,
                                 validation_split = val_ratio)

"""# 5. 성능 시각화"""

plt.plot(learning_result.history['acc'])
plt.plot(learning_result.history['val_acc'])
plt.legend(['training data accuracy','validation data accuracy'])
plt.xlabel('epochs')
plt.ylabel('accuracy')

plt.plot(learning_result.history['loss'])
plt.plot(learning_result.history['val_loss'])
plt.legend(['training data loss','validation data loss'])
plt.xlabel('epochs')
plt.ylabel('loss')

"""# 6. test data 성능 평가"""

test_loss, test_acc = iris_model.evaluate(X_test,y_test)
print('Test Loss: ', test_loss)
print('Test Accuracy: ', test_acc)