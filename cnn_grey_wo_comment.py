# -*- coding: utf-8 -*-
"""CNN_grey_wo_comment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p8ZF_0Z7QJgRjS417dVMXeSsFPeK1fxR
"""

import numpy as np
import matplotlib.pyplot as plt

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten
from tensorflow.keras.datasets import mnist

"""# 1. Data Load"""

(X_train,y_train),(X_test,y_test) = mnist.load_data()

print(X_train.shape, y_train.shape, X_test.shape, y_test.shape)

plt.imshow(X_train[0],cmap='gray')
print(y_train[0])

plt.imshow(X_train[12],cmap='gray')
print(y_train[12])

y_val = np.unique(y_train)
print('class의 종류: ', y_val)
print('class의 수:', len(y_val))

mnist_model = Sequential([
    Conv2D(filters=32,kernel_size=(3,3),strides=(1,1),activation='relu',input_shape=(28,28,1)),
    MaxPooling2D(pool_size=(2,2),strides=(2,2)),
    Flatten(),
    Dense(units=512,activation='relu'),
    Dense(units=10,activation='softmax')
])

mnist_model.summary()

mnist_model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['acc'])

Xsc_train = X_train/255
Xsc_test = X_test/255

ep = 20
batch = 512
val_ratio = 0.2

mnist_result = mnist_model.fit(Xsc_train, y_train,
                               epochs=ep,
                               batch_size=batch,
                               validation_split=val_ratio)

"""# 3. model 검증"""

mnist_model.evaluate(Xsc_test,y_test)

plt.plot(mnist_result.history['loss'])
plt.plot(mnist_result.history['val_loss'])
plt.legend(['training','validation'])

plt.plot(mnist_result.history['acc'])
plt.plot(mnist_result.history['val_acc'])
plt.legend(['training','validation'])

pred_proba = mnist_model.predict(Xsc_test)

pred = np.argmax(pred_proba,axis=1)

wrong_ind = np.argwhere(y_test != pred)

print('the number of wrong classified data: ', len(wrong_ind))

wrong_ind = wrong_ind.ravel()

j = 1
plt.figure(figsize=(5,12))
for i in wrong_ind[:10]:
  plt.subplot(5,2,j)
  plt.imshow(X_test[i],cmap='gray')
  plt.title('[target]:'+ str(y_test[i])+'  [pred]: '+ str(pred[i]))
  j=j+1

plt.tight_layout()

